name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5.4.5
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.0

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.11"
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: snok/install-poetry@v1.4.1
      - name: Install Dependencies
        run: poetry install
        shell: bash
      - name: Test with Pytest
        run: poetry run pytest
        shell: bash
  release:
    runs-on: ubuntu-latest
    needs:
      - test
    concurrency: release
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
      actions: write
      packages: write
    environment:
      name: release

    steps:
    - uses: actions/checkout@v4
      with:
        ref: release
        fetch-depth: 0
        persist-credentials: false
    - name: Set up GitHub CLI
      uses: actions/setup-gh@v2
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Configure Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"

    # - name: Python Semantic Release
    #   id: release
    #   uses: python-semantic-release/python-semantic-release@v9.14.0
    #   with:
    #     github_token: ${{ secrets.GH_TOKEN }}
    #     commit_author: "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
    #     push: false

    - name: Create Release Branch and MR
      # if: steps.release.outputs.released == 'true'
      run: |
        # Create a release branch
        RELEASE_BRANCH="release/${{ steps.release.outputs.version }}"
        git checkout -b "$RELEASE_BRANCH"
        git push origin "$RELEASE_BRANCH"

        # Create a merge request using GitHub CLI
        gh pr create \
          --base main \
          --head "$RELEASE_BRANCH" \
          --title "Release ${{ steps.release.outputs.version }}" \
          --body "This MR contains the latest release changes for version ${{ steps.release.outputs.version }}."
